/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => KeepSortedPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
function normalize(s) {
  var _a;
  return (_a = s == null ? void 0 : s.trim().toLowerCase()) != null ? _a : "";
}
function sortFunc(a, b) {
  return normalize(a.textContent).localeCompare(normalize(b.textContent));
}
var KeepSortedPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerMarkdownPostProcessor(
      async (element, context) => {
        var _a;
        const lists = element.querySelectorAll("ul,ol");
        for (const list of Array.from(lists)) {
          const maybeComment = list.previousSibling;
          if ((maybeComment == null ? void 0 : maybeComment.nodeType) !== Node.COMMENT_NODE || !((_a = maybeComment == null ? void 0 : maybeComment.nodeValue) == null ? void 0 : _a.match(/s+keep-sorted\s+/i)))
            continue;
          list.prepend(...Array.from(list.children).sort(sortFunc));
        }
      }
    );
  }
  onunload() {
    console.log("Unloading keep-sorted Plugin...");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbi8vIFJlbWVtYmVyIHRvIHJlbmFtZSB0aGVzZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIVxuXG5pbnRlcmZhY2UgS2VlcFNvcnRlZFBsdWdpblNldHRpbmdzIHtcblx0bXlTZXR0aW5nOiBzdHJpbmc7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEtlZXBTb3J0ZWRQbHVnaW5TZXR0aW5ncyA9IHtcblx0bXlTZXR0aW5nOiBcImRlZmF1bHRcIixcbn07XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShzOiBzdHJpbmcgfCBudWxsKSB7XG5cdHJldHVybiBzPy50cmltKCkudG9Mb3dlckNhc2UoKSA/PyBcIlwiO1xufVxuXG5mdW5jdGlvbiBzb3J0RnVuYyhhOiBIVE1MRWxlbWVudCwgYjogSFRNTEVsZW1lbnQpIHtcblx0cmV0dXJuIG5vcm1hbGl6ZShhLnRleHRDb250ZW50KS5sb2NhbGVDb21wYXJlKG5vcm1hbGl6ZShiLnRleHRDb250ZW50KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEtlZXBTb3J0ZWRQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogS2VlcFNvcnRlZFBsdWdpblNldHRpbmdzO1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duUG9zdFByb2Nlc3Nvcihcblx0XHRcdGFzeW5jIChlbGVtZW50OiBIVE1MRWxlbWVudCwgY29udGV4dDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCkgPT4ge1xuXHRcdFx0XHRjb25zdCBsaXN0cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcInVsLG9sXCIpO1xuXG5cdFx0XHRcdGZvciAoY29uc3QgbGlzdCBvZiBBcnJheS5mcm9tKGxpc3RzKSkge1xuXHRcdFx0XHRcdGNvbnN0IG1heWJlQ29tbWVudCA9IGxpc3QucHJldmlvdXNTaWJsaW5nO1xuXHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdG1heWJlQ29tbWVudD8ubm9kZVR5cGUgIT09IE5vZGUuQ09NTUVOVF9OT0RFIHx8XG5cdFx0XHRcdFx0XHQhbWF5YmVDb21tZW50Py5ub2RlVmFsdWU/Lm1hdGNoKC9zK2tlZXAtc29ydGVkXFxzKy9pKVxuXHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdGxpc3QucHJlcGVuZCguLi5BcnJheS5mcm9tKGxpc3QuY2hpbGRyZW4pLnNvcnQoc29ydEZ1bmMpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHQpO1xuXHR9XG5cblx0b251bmxvYWQoKSB7XG5cdFx0Y29uc29sZS5sb2coXCJVbmxvYWRpbmcga2VlcC1zb3J0ZWQgUGx1Z2luLi4uXCIpO1xuXHR9XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXHR9XG5cblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBcUQ7QUFRckQsSUFBTSxtQkFBNkM7QUFBQSxFQUNsRCxXQUFXO0FBQ1o7QUFFQSxTQUFTLFVBQVUsR0FBa0I7QUFackM7QUFhQyxVQUFPLDRCQUFHLE9BQU8sa0JBQVYsWUFBMkI7QUFDbkM7QUFFQSxTQUFTLFNBQVMsR0FBZ0IsR0FBZ0I7QUFDakQsU0FBTyxVQUFVLEVBQUUsV0FBVyxFQUFFLGNBQWMsVUFBVSxFQUFFLFdBQVcsQ0FBQztBQUN2RTtBQUVBLElBQXFCLG1CQUFyQixjQUE4Qyx1QkFBTztBQUFBLEVBR3BELE1BQU0sU0FBUztBQUNkLFVBQU0sS0FBSyxhQUFhO0FBRXhCLFNBQUs7QUFBQSxNQUNKLE9BQU8sU0FBc0IsWUFBMEM7QUEzQjFFO0FBNEJJLGNBQU0sUUFBUSxRQUFRLGlCQUFpQixPQUFPO0FBRTlDLG1CQUFXLFFBQVEsTUFBTSxLQUFLLEtBQUssR0FBRztBQUNyQyxnQkFBTSxlQUFlLEtBQUs7QUFDMUIsZUFDQyw2Q0FBYyxjQUFhLEtBQUssZ0JBQ2hDLEdBQUMsa0RBQWMsY0FBZCxtQkFBeUIsTUFBTTtBQUVoQztBQUNELGVBQUssUUFBUSxHQUFHLE1BQU0sS0FBSyxLQUFLLFFBQVEsRUFBRSxLQUFLLFFBQVEsQ0FBQztBQUFBLFFBQ3pEO0FBQUEsTUFDRDtBQUFBLElBQ0Q7QUFBQSxFQUNEO0FBQUEsRUFFQSxXQUFXO0FBQ1YsWUFBUSxJQUFJLGlDQUFpQztBQUFBLEVBQzlDO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUMxRTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ3BCLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ2xDO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
