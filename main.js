/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => KeepSortedPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var KeepSortedPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerMarkdownPostProcessor(
      async (element, { sourcePath }) => {
        var _a;
        const codeBlocks = element.querySelectorAll("pre > code");
        for (const codeBlock of Array.from(codeBlocks)) {
          if (!codeBlock.hasClass("language-keep-sorted")) continue;
          const preElement = codeBlock.parentElement;
          if (!preElement) continue;
          const src = (_a = codeBlock.textContent) != null ? _a : "";
          preElement.classList.add("keep-sorted-block");
          const el = document.createElement("div");
          el.className = "keep-sorted-container";
          await import_obsidian.MarkdownRenderer.render(this.app, src, el, sourcePath, this);
          const sorted = Array.from(el.children).sort(
            (a, b) => {
              var _a2, _b;
              return ((_a2 = a.textContent) != null ? _a2 : "").localeCompare((_b = b.textContent) != null ? _b : "");
            }
          );
          console.log("sorted elements are", sorted);
          for (const elt of sorted) el.appendChild(elt);
          preElement.replaceWith(el);
        }
      }
    );
  }
  onunload() {
    console.log("Unloading keep-sorted Plugin...");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtcblx0UGx1Z2luLFxuXHRNYXJrZG93blBvc3RQcm9jZXNzb3IsXG5cdE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsXG5cdE1hcmtkb3duUmVuZGVyZXIsXG59IGZyb20gXCJvYnNpZGlhblwiO1xuXG4vLyBSZW1lbWJlciB0byByZW5hbWUgdGhlc2UgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcyFcblxuaW50ZXJmYWNlIEtlZXBTb3J0ZWRQbHVnaW5TZXR0aW5ncyB7XG5cdG15U2V0dGluZzogc3RyaW5nO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBLZWVwU29ydGVkUGx1Z2luU2V0dGluZ3MgPSB7XG5cdG15U2V0dGluZzogXCJkZWZhdWx0XCIsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLZWVwU29ydGVkUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0c2V0dGluZ3M6IEtlZXBTb3J0ZWRQbHVnaW5TZXR0aW5ncztcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IoXG5cdFx0XHRhc3luYyAoXG5cdFx0XHRcdGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuXHRcdFx0XHR7IHNvdXJjZVBhdGggfTogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCxcblx0XHRcdCkgPT4ge1xuXHRcdFx0XHRjb25zdCBjb2RlQmxvY2tzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwicHJlID4gY29kZVwiKTtcblxuXHRcdFx0XHRmb3IgKGNvbnN0IGNvZGVCbG9jayBvZiBBcnJheS5mcm9tKGNvZGVCbG9ja3MpKSB7XG5cdFx0XHRcdFx0aWYgKCFjb2RlQmxvY2suaGFzQ2xhc3MoXCJsYW5ndWFnZS1rZWVwLXNvcnRlZFwiKSkgY29udGludWU7XG5cblx0XHRcdFx0XHRjb25zdCBwcmVFbGVtZW50ID0gY29kZUJsb2NrLnBhcmVudEVsZW1lbnQ7XG5cdFx0XHRcdFx0aWYgKCFwcmVFbGVtZW50KSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGNvbnN0IHNyYyA9IGNvZGVCbG9jay50ZXh0Q29udGVudCA/PyBcIlwiO1xuXG5cdFx0XHRcdFx0cHJlRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwia2VlcC1zb3J0ZWQtYmxvY2tcIik7XG5cblx0XHRcdFx0XHRjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcdFx0ZWwuY2xhc3NOYW1lID0gXCJrZWVwLXNvcnRlZC1jb250YWluZXJcIjtcblxuXHRcdFx0XHRcdGF3YWl0IE1hcmtkb3duUmVuZGVyZXIucmVuZGVyKHRoaXMuYXBwLCBzcmMsIGVsLCBzb3VyY2VQYXRoLCB0aGlzKTtcblx0XHRcdFx0XHRjb25zdCBzb3J0ZWQgPSBBcnJheS5mcm9tKGVsLmNoaWxkcmVuKS5zb3J0KFxuXHRcdFx0XHRcdFx0KGE6IEVsZW1lbnQsIGI6IEVsZW1lbnQpID0+XG5cdFx0XHRcdFx0XHRcdChhLnRleHRDb250ZW50ID8/IFwiXCIpLmxvY2FsZUNvbXBhcmUoYi50ZXh0Q29udGVudCA/PyBcIlwiKSxcblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJzb3J0ZWQgZWxlbWVudHMgYXJlXCIsIHNvcnRlZCk7XG5cdFx0XHRcdFx0Zm9yIChjb25zdCBlbHQgb2Ygc29ydGVkKSBlbC5hcHBlbmRDaGlsZChlbHQpO1xuXG5cdFx0XHRcdFx0cHJlRWxlbWVudC5yZXBsYWNlV2l0aChlbCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0KTtcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXHRcdGNvbnNvbGUubG9nKFwiVW5sb2FkaW5nIGtlZXAtc29ydGVkIFBsdWdpbi4uLlwiKTtcblx0fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBS087QUFRUCxJQUFNLG1CQUE2QztBQUFBLEVBQ2xELFdBQVc7QUFDWjtBQUVBLElBQXFCLG1CQUFyQixjQUE4Qyx1QkFBTztBQUFBLEVBR3BELE1BQU0sU0FBUztBQUNkLFVBQU0sS0FBSyxhQUFhO0FBRXhCLFNBQUs7QUFBQSxNQUNKLE9BQ0MsU0FDQSxFQUFFLFdBQVcsTUFDVDtBQTNCUjtBQTRCSSxjQUFNLGFBQWEsUUFBUSxpQkFBaUIsWUFBWTtBQUV4RCxtQkFBVyxhQUFhLE1BQU0sS0FBSyxVQUFVLEdBQUc7QUFDL0MsY0FBSSxDQUFDLFVBQVUsU0FBUyxzQkFBc0IsRUFBRztBQUVqRCxnQkFBTSxhQUFhLFVBQVU7QUFDN0IsY0FBSSxDQUFDLFdBQVk7QUFFakIsZ0JBQU0sT0FBTSxlQUFVLGdCQUFWLFlBQXlCO0FBRXJDLHFCQUFXLFVBQVUsSUFBSSxtQkFBbUI7QUFFNUMsZ0JBQU0sS0FBSyxTQUFTLGNBQWMsS0FBSztBQUN2QyxhQUFHLFlBQVk7QUFFZixnQkFBTSxpQ0FBaUIsT0FBTyxLQUFLLEtBQUssS0FBSyxJQUFJLFlBQVksSUFBSTtBQUNqRSxnQkFBTSxTQUFTLE1BQU0sS0FBSyxHQUFHLFFBQVEsRUFBRTtBQUFBLFlBQ3RDLENBQUMsR0FBWSxNQUFZO0FBN0MvQixrQkFBQUEsS0FBQTtBQThDUSx1QkFBQUEsTUFBQSxFQUFFLGdCQUFGLE9BQUFBLE1BQWlCLElBQUksZUFBYyxPQUFFLGdCQUFGLFlBQWlCLEVBQUU7QUFBQTtBQUFBLFVBQ3pEO0FBRUEsa0JBQVEsSUFBSSx1QkFBdUIsTUFBTTtBQUN6QyxxQkFBVyxPQUFPLE9BQVEsSUFBRyxZQUFZLEdBQUc7QUFFNUMscUJBQVcsWUFBWSxFQUFFO0FBQUEsUUFDMUI7QUFBQSxNQUNEO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFBQSxFQUVBLFdBQVc7QUFDVixZQUFRLElBQUksaUNBQWlDO0FBQUEsRUFDOUM7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNwQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQzFFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbEM7QUFDRDsiLAogICJuYW1lcyI6IFsiX2EiXQp9Cg==
