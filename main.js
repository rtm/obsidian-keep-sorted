/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// utils/sort.ts
var sortWithIndentation = (lines) => {
  console.log("lines", lines);
  const items = [];
  let currentItem = null;
  lines.forEach((line) => {
    const indentMatch = line.match(/^\s+/);
    const indentLevel = indentMatch ? indentMatch[0].length : 0;
    if (!currentItem || indentLevel <= currentItem.indent) {
      currentItem = { indent: indentLevel, content: [] };
      items.push(currentItem);
    }
    currentItem.content.push(line);
  });
  console.log("items", items);
  items.sort(
    (a, b) => a.content[0].trim().localeCompare(b.content[0].trim())
  );
  const result = items.flatMap((item) => item.content);
  return result;
};

// main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("Loading keep-sorted Plugin...");
    this.registerMarkdownPostProcessor((element, context) => {
      console.log("element", element);
      let codeblocks = element.findAll("code");
      codeblocks = codeblocks.filter(
        (item) => item.hasClass("language-keep-sorted")
      );
      for (let codeblock of codeblocks) {
        const text = codeblock.innerText.trim();
        const lines = text.split("\n").filter((line) => line.trim() !== "");
        const sortedContent = sortWithIndentation(lines);
        codeblock.replaceWith(sortedContent.join("\n"));
      }
    });
  }
  onunload() {
    console.log("Unloading keep-sorted Plugin...");
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJ1dGlscy9zb3J0LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBQbHVnaW4gfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgc29ydFdpdGhJbmRlbnRhdGlvbiB9IGZyb20gXCJ1dGlsc1wiO1xyXG5cclxuLy8gUmVtZW1iZXIgdG8gcmVuYW1lIHRoZXNlIGNsYXNzZXMgYW5kIGludGVyZmFjZXMhXHJcblxyXG5pbnRlcmZhY2UgTXlQbHVnaW5TZXR0aW5ncyB7XHJcblx0bXlTZXR0aW5nOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IE15UGx1Z2luU2V0dGluZ3MgPSB7XHJcblx0bXlTZXR0aW5nOiBcImRlZmF1bHRcIixcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogTXlQbHVnaW5TZXR0aW5ncztcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcblx0XHRjb25zb2xlLmxvZyhcIkxvYWRpbmcga2VlcC1zb3J0ZWQgUGx1Z2luLi4uXCIpO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IoKGVsZW1lbnQsIGNvbnRleHQpID0+IHtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJlbGVtZW50XCIsIGVsZW1lbnQpO1xyXG5cdFx0XHRsZXQgY29kZWJsb2NrcyA9IGVsZW1lbnQuZmluZEFsbChcImNvZGVcIik7XHJcblx0XHRcdGNvZGVibG9ja3MgPSBjb2RlYmxvY2tzLmZpbHRlcigoaXRlbSkgPT5cclxuXHRcdFx0XHRpdGVtLmhhc0NsYXNzKFwibGFuZ3VhZ2Uta2VlcC1zb3J0ZWRcIilcclxuXHRcdFx0KTtcclxuXHRcdFx0Zm9yIChsZXQgY29kZWJsb2NrIG9mIGNvZGVibG9ja3MpIHtcclxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcImNvZGVibG9ja1wiLCBjb2RlYmxvY2suaW5uZXJIVE1MKTtcclxuXHRcdFx0XHRjb25zdCB0ZXh0ID0gY29kZWJsb2NrLmlubmVyVGV4dC50cmltKCk7XHJcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJ0ZXh0XCIsIHRleHQpO1xyXG5cclxuXHRcdFx0XHRjb25zdCBsaW5lcyA9IHRleHRcclxuXHRcdFx0XHRcdC5zcGxpdChcIlxcblwiKVxyXG5cdFx0XHRcdFx0LmZpbHRlcigobGluZSkgPT4gbGluZS50cmltKCkgIT09IFwiXCIpO1xyXG5cclxuXHRcdFx0XHRjb25zdCBzb3J0ZWRDb250ZW50ID0gc29ydFdpdGhJbmRlbnRhdGlvbihsaW5lcyk7XHJcblxyXG5cdFx0XHRcdGNvZGVibG9jay5yZXBsYWNlV2l0aChzb3J0ZWRDb250ZW50LmpvaW4oXCJcXG5cIikpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdG9udW5sb2FkKCkge1xyXG5cdFx0Y29uc29sZS5sb2coXCJVbmxvYWRpbmcga2VlcC1zb3J0ZWQgUGx1Z2luLi4uXCIpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oXHJcblx0XHRcdHt9LFxyXG5cdFx0XHRERUZBVUxUX1NFVFRJTkdTLFxyXG5cdFx0XHRhd2FpdCB0aGlzLmxvYWREYXRhKClcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdH1cclxufVxyXG4iLCAiaW1wb3J0IHsgVHJlZU5vZGUgfSBmcm9tIFwiaW50ZXJmYWNlc1wiO1xyXG5cclxuLyoqXHJcbiAqIFNvcnQgbGluZXMgd2hpbGUgcHJlc2VydmluZyBpbmRlbnRlZCBoaWVyYXJjaHlcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmdbXX0gbGluZXMgLSBBcnJheSBvZiBsaW5lcyB0byBzb3J0XHJcbiAqIEByZXR1cm5zIHtzdHJpbmdbXX0gU29ydGVkIGxpbmVzIHdpdGggaW5kZW50YXRpb24gcHJlc2VydmVkXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc29ydFdpdGhJbmRlbnRhdGlvbiA9IChsaW5lczogc3RyaW5nW10pOiBzdHJpbmdbXSA9PiB7XHJcblx0Y29uc29sZS5sb2coXCJsaW5lc1wiLCBsaW5lcyk7XHJcblx0Y29uc3QgaXRlbXM6IHsgaW5kZW50OiBudW1iZXI7IGNvbnRlbnQ6IHN0cmluZ1tdIH1bXSA9IFtdO1xyXG5cdGxldCBjdXJyZW50SXRlbTogeyBpbmRlbnQ6IG51bWJlcjsgY29udGVudDogc3RyaW5nW10gfSB8IG51bGwgPSBudWxsO1xyXG5cclxuXHRsaW5lcy5mb3JFYWNoKChsaW5lKSA9PiB7XHJcblx0XHRjb25zdCBpbmRlbnRNYXRjaCA9IGxpbmUubWF0Y2goL15cXHMrLyk7XHJcblx0XHRjb25zdCBpbmRlbnRMZXZlbCA9IGluZGVudE1hdGNoID8gaW5kZW50TWF0Y2hbMF0ubGVuZ3RoIDogMDtcclxuXHJcblx0XHRpZiAoIWN1cnJlbnRJdGVtIHx8IGluZGVudExldmVsIDw9IGN1cnJlbnRJdGVtLmluZGVudCkge1xyXG5cdFx0XHQvLyBTdGFydCBhIG5ldyBwYXJlbnQgaXRlbVxyXG5cdFx0XHRjdXJyZW50SXRlbSA9IHsgaW5kZW50OiBpbmRlbnRMZXZlbCwgY29udGVudDogW10gfTtcclxuXHRcdFx0aXRlbXMucHVzaChjdXJyZW50SXRlbSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Y3VycmVudEl0ZW0uY29udGVudC5wdXNoKGxpbmUpO1xyXG5cdH0pO1xyXG5cclxuXHRjb25zb2xlLmxvZyhcIml0ZW1zXCIsIGl0ZW1zKTtcclxuXHJcblx0Ly8gU29ydCBwYXJlbnRzXHJcblx0aXRlbXMuc29ydCgoYSwgYikgPT5cclxuXHRcdGEuY29udGVudFswXS50cmltKCkubG9jYWxlQ29tcGFyZShiLmNvbnRlbnRbMF0udHJpbSgpKVxyXG5cdCk7XHJcblxyXG5cdC8vIFNvcnQgY2hpbGRyZW4gb2YgZWFjaCBwYXJlbnQgc2VwYXJhdGVseVxyXG5cclxuXHQvLyBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcblx0Ly8gXHRpZiAoaXRlbS5jb250ZW50Lmxlbmd0aCA+IDEpIHtcclxuXHQvLyBcdFx0Y29uc3QgW3BhcmVudCwgLi4uY2hpbGRyZW5dID0gaXRlbS5jb250ZW50O1xyXG5cdC8vIFx0XHRjaGlsZHJlbi5zb3J0KChhLCBiKSA9PiBhLnRyaW0oKS5sb2NhbGVDb21wYXJlKGIudHJpbSgpKSk7XHJcblx0Ly8gXHRcdGl0ZW0uY29udGVudCA9IFtwYXJlbnQsIC4uLmNoaWxkcmVuXTtcclxuXHQvLyBcdH1cclxuXHQvLyB9KTtcclxuXHJcblx0Y29uc3QgcmVzdWx0ID0gaXRlbXMuZmxhdE1hcCgoaXRlbSkgPT4gaXRlbS5jb250ZW50KTtcclxuXHJcblx0cmV0dXJuIHJlc3VsdDtcclxufTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUF1Qjs7O0FDUWhCLElBQU0sc0JBQXNCLENBQUMsVUFBOEI7QUFDakUsVUFBUSxJQUFJLFNBQVMsS0FBSztBQUMxQixRQUFNLFFBQWlELENBQUM7QUFDeEQsTUFBSSxjQUE0RDtBQUVoRSxRQUFNLFFBQVEsQ0FBQyxTQUFTO0FBQ3ZCLFVBQU0sY0FBYyxLQUFLLE1BQU0sTUFBTTtBQUNyQyxVQUFNLGNBQWMsY0FBYyxZQUFZLENBQUMsRUFBRSxTQUFTO0FBRTFELFFBQUksQ0FBQyxlQUFlLGVBQWUsWUFBWSxRQUFRO0FBRXRELG9CQUFjLEVBQUUsUUFBUSxhQUFhLFNBQVMsQ0FBQyxFQUFFO0FBQ2pELFlBQU0sS0FBSyxXQUFXO0FBQUEsSUFDdkI7QUFFQSxnQkFBWSxRQUFRLEtBQUssSUFBSTtBQUFBLEVBQzlCLENBQUM7QUFFRCxVQUFRLElBQUksU0FBUyxLQUFLO0FBRzFCLFFBQU07QUFBQSxJQUFLLENBQUMsR0FBRyxNQUNkLEVBQUUsUUFBUSxDQUFDLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxRQUFRLENBQUMsRUFBRSxLQUFLLENBQUM7QUFBQSxFQUN0RDtBQVlBLFFBQU0sU0FBUyxNQUFNLFFBQVEsQ0FBQyxTQUFTLEtBQUssT0FBTztBQUVuRCxTQUFPO0FBQ1I7OztBRHJDQSxJQUFNLG1CQUFxQztBQUFBLEVBQzFDLFdBQVc7QUFDWjtBQUVBLElBQXFCLFdBQXJCLGNBQXNDLHVCQUFPO0FBQUEsRUFHNUMsTUFBTSxTQUFTO0FBQ2QsVUFBTSxLQUFLLGFBQWE7QUFFeEIsWUFBUSxJQUFJLCtCQUErQjtBQUUzQyxTQUFLLDhCQUE4QixDQUFDLFNBQVMsWUFBWTtBQUN4RCxjQUFRLElBQUksV0FBVyxPQUFPO0FBQzlCLFVBQUksYUFBYSxRQUFRLFFBQVEsTUFBTTtBQUN2QyxtQkFBYSxXQUFXO0FBQUEsUUFBTyxDQUFDLFNBQy9CLEtBQUssU0FBUyxzQkFBc0I7QUFBQSxNQUNyQztBQUNBLGVBQVMsYUFBYSxZQUFZO0FBRWpDLGNBQU0sT0FBTyxVQUFVLFVBQVUsS0FBSztBQUd0QyxjQUFNLFFBQVEsS0FDWixNQUFNLElBQUksRUFDVixPQUFPLENBQUMsU0FBUyxLQUFLLEtBQUssTUFBTSxFQUFFO0FBRXJDLGNBQU0sZ0JBQWdCLG9CQUFvQixLQUFLO0FBRS9DLGtCQUFVLFlBQVksY0FBYyxLQUFLLElBQUksQ0FBQztBQUFBLE1BQy9DO0FBQUEsSUFDRCxDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsV0FBVztBQUNWLFlBQVEsSUFBSSxpQ0FBaUM7QUFBQSxFQUM5QztBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ3BCLFNBQUssV0FBVyxPQUFPO0FBQUEsTUFDdEIsQ0FBQztBQUFBLE1BQ0Q7QUFBQSxNQUNBLE1BQU0sS0FBSyxTQUFTO0FBQUEsSUFDckI7QUFBQSxFQUNEO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbEM7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
